name: Python application

on: [push, pull_request]

jobs:
  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install xz-utils debconf-utils libusb-1.0-0 libusb-1.0-0-dev -y
        curl -OsL https://github.com/matham/rotpy/releases/download/v0.1.0.dev0/spinnaker.tar.xz
        tar -xf spinnaker.tar.xz
        sudo sh -c 'echo "libspinnaker libspinnaker/accepted-flir-eula select true" | /usr/bin/debconf-set-selections'
        sudo dpkg -i spinnaker/libgentl_*.deb
        sudo dpkg -i spinnaker/libspinnaker_*.deb
        sudo dpkg -i spinnaker/libspinnaker-dev_*.deb

        python3 -m pip install --upgrade sphinx sphinx-rtd-theme cython

    - name: Build rotpy
      run: python3 -m pip install -e .

    - name: Generate docs
      run: |
        cd doc
        make html

    - name: gh-pages upload
      if: github.ref == 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cp -r doc/build/html ~/docs_temp

        git config --global user.email "matt@einhorn.dev"
        git config --global user.name "Matthew Einhorn"
        git remote rm origin || true
        git remote add origin "https://x-access-token:${GITHUB_TOKEN}@github.com/matham/rotpy.git"

        git checkout --orphan gh-pages
        cp -r .git ~/docs_git
        cd ..
        rm -rf rotpy
        mkdir rotpy
        cd rotpy
        cp -r ~/docs_git .git
        cp -r ~/docs_temp/* .
        touch .nojekyll

        git add .
        git commit -a -m "Docs for git-$GITHUB_SHA"
        git push origin gh-pages -f

  linux_wheels:
    env:
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_24
      CIBW_BUILD_VERBOSITY: 3
      CIBW_PLATFORM: linux
      CIBW_ENVIRONMENT: ROTPY_CTI=/opt/spinnaker/lib/flir-gentl
      CIBW_BUILD: 'cp37-manylinux_x86_64 cp38-manylinux_x86_64 cp39-manylinux_x86_64 cp310-manylinux_x86_64'
      CIBW_ARCHS: x86_64
      CIBW_REPAIR_WHEEL_COMMAND: 'auditwheel repair --plat manylinux_2_27_x86_64 -w {dest_dir} {wheel}'
      CIBW_BEFORE_ALL_LINUX: >
        apt update &&
        apt install xz-utils debconf-utils libusb-1.0-0 libusb-1.0-0-dev -y &&
        curl -OsL "https://github.com/matham/rotpy/releases/download/v0.1.0.dev0/spinnaker.tar.xz" &&
        tar -xf spinnaker.tar.xz &&
        echo "libspinnaker libspinnaker/accepted-flir-eula select true" | /usr/bin/debconf-set-selections &&
        dpkg -i spinnaker/libgentl_*.deb &&
        dpkg -i spinnaker/libspinnaker_*.deb &&
        dpkg -i spinnaker/libspinnaker-dev_*.deb &&
        cp /opt/spinnaker/bin/*.property /opt/spinnaker/lib/flir-gentl &&
        curl -OsL "https://github.com/matham/rotpy/releases/download/v0.1.0.dev0/SPINNAKER_LICENSE" &&
        cp SPINNAKER_LICENSE /opt/spinnaker/lib/flir-gentl
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel

      - name: Make wheels
        run: |
          python -m cibuildwheel --output-dir dist

      - name: Upload wheel
        uses: actions/upload-artifact@v2
        with:
          name: py_wheel
          path: dist

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v0.1.14
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: dist/*

      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/')
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.pypi_password }}
        run: |
          python -m pip install twine
          twine upload dist/*

  test_wheel:
    runs-on: ${{ matrix.os }}
    needs: [ linux_wheels, windows_wheels ]
    strategy:
      matrix:
        os: [ 'ubuntu-latest', 'windows-latest' ]
        arch: ['x64', ]
        include:
          - os: windows-latest
            arch: x86
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
          architecture: ${{ matrix.arch }}
      - uses: actions/download-artifact@v2
        with:
          name: py_wheel
          path: dist
      - name: Install
        run: |
          python -m pip install --upgrade pytest
          python -m pip install --no-index --only-binary rotpy --find-links=dist rotpy
      - name: Test
        run: |
          cd ~/
          pytest --pyargs rotpy.test

  windows_wheels:
    runs-on: windows-latest
    strategy:
      matrix:
        python: [ '3.7', '3.8', '3.9', '3.10' ]
        arch: ['x64', 'x86']

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
        architecture: ${{ matrix.arch }}

    - name: Make sdist
      if: matrix.arch == 'x64' && matrix.python == '3.10'
      run: |
        python -m pip install build
        python -m build --sdist

    - uses: actions/cache@v2
      id: get-deps
      with:
        path: spinnaker/
        key: spinnaker-win-${{ matrix.arch }}-0

    - name: Get dependencies
      env:
        ZIP_PASS: ${{ secrets.ZIP_PASS }}
      if: steps.get-deps.outputs.cache-hit != 'true'
      run: |
        Invoke-WebRequest "https://github.com/matham/rotpy/releases/download/v0.1.0.dev0/spinnaker.7z" -OutFile "spinnaker.7z"
        7z x "spinnaker.7z"
        Invoke-WebRequest "https://github.com/matham/rotpy/releases/download/v0.1.0.dev0/SPINNAKER_LICENSE" -OutFile "spinnaker/bin_${{ matrix.arch }}/SPINNAKER_LICENSE"
        cp "spinnaker/bin_${{ matrix.arch }}/SPINNAKER_LICENSE" "${pwd}/spinnaker/cti_${{ matrix.arch }}"

    - name: Make wheel
      run: |
        $env:ROTPY_INCLUDE = "${pwd}/spinnaker/include"
        $env:ROTPY_LIB = "${pwd}/spinnaker/bin_${{ matrix.arch }};${pwd}/spinnaker/lib_${{ matrix.arch }}"
        $env:ROTPY_WHEEL_BIN = "${pwd}/spinnaker/bin_${{ matrix.arch }}"
        $env:ROTPY_CTI = "${pwd}/spinnaker/cti_${{ matrix.arch }}"

        python -m pip install build
        python -m build --wheel

    - name: Upload wheel
      uses: actions/upload-artifact@v2
      with:
        name: py_wheel
        path: dist

    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v0.1.14
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: dist/*

    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: "__token__"
        TWINE_PASSWORD: ${{ secrets.pypi_password }}
      run: |
        python -m pip install twine
        twine upload dist/*
